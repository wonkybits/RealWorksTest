import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import Card from "../components/Card";
import { BeachCities } from "../data/beach_cities";
import { SkiCities } from "../data/ski_cities";
import { GetWeather } from "../lib/GetWeather";
import styles from "../styles/Home.module.css";
import { FilteredWeather, WeatherDataMode, LocalWeather } from "../types/types";

interface HomeProps {
  beachCities: FilteredWeather[] | boolean[] | null;
  skiCities: FilteredWeather[] | boolean[] | null;
}

const Home: NextPage<HomeProps> = (props) => {
  const [currLoc, setCurrLoc] = useState<LocalWeather>({
    lat: 0,
    lng: 0,
    temperature: 0,
  });

  const [loaded, setLoaded] = useState(false);

  useEffect(() => {
    navigator.geolocation.getCurrentPosition(async (position) => {
      const tempPromise = await fetch("/api/GetLocalTemp", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ lat: position.coords.latitude, lng: position.coords.longitude }),
      });

      const tempJSON = await tempPromise.json();

      setCurrLoc({
        lat: Math.round(position.coords.latitude * 10000) / 10000,
        lng: Math.round(position.coords.longitude * 10000) / 10000,
        temperature: tempJSON.temperature ?? tempJSON.message,
      });

      setLoaded(true);
    });
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>RealWorks Labs Code test</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <section className={styles.local_weather_container}>
          <span className={styles.title}>Local Weather</span>
          {!loaded ? (
            <span>Loading...</span>
          ) : (
            <div className={styles.local_weather_data}>
              <span className={styles.lat}>
                <span className={styles.label}>Latitude:</span>
                {currLoc.lat}
              </span>
              <span className={styles.lng}>
                <span className={styles.label}>Longtitude:</span>
                {currLoc.lng}
              </span>
              <span className={styles.temp}>
                <span className={styles.label}>Temperature:</span>
                {currLoc.temperature}
              </span>
            </div>
          )}
        </section>
        <section className={styles.weather_section}>
          <div className={styles.weather_container}>
            <span className={styles.title}>Beach Cities Weather</span>
            {props.beachCities &&
              props.beachCities.map((city) => {
                if (!city) {
                  return null;
                } else {
                  return <Card data={city} key={`${city.name}`} />;
                }
              })}
          </div>
          <div className={styles.weather_container}>
            <span className={styles.title}>Ski Cities Weather</span>
            {props.skiCities &&
              props.skiCities.map((city) => {
                if (!city) {
                  return null;
                } else {
                  return <Card data={city} key={`${city.name}`} />;
                }
              })}
          </div>
        </section>
      </main>

      <footer className={styles.footer}>
        <p>Phil Stene</p>
      </footer>
    </div>
  );
};

export async function getServerSideProps() {
  try {
    const beachCityWeather: Promise<FilteredWeather | boolean>[] = BeachCities.map(async (city) => {
      const weather = await GetWeather(city, WeatherDataMode.BEACH);
      if (!weather) {
        return Promise.resolve(weather);
      } else {
        return weather;
      }
    });
    const skiCityWeather: Promise<FilteredWeather | boolean>[] = SkiCities.map(async (city) => {
      const weather = GetWeather(city, WeatherDataMode.SKI);
      if (!weather) {
        return Promise.resolve(weather);
      } else {
        return weather;
      }
    });

    return {
      props: {
        beachCities: await Promise.all(beachCityWeather),
        skiCities: await Promise.all(skiCityWeather),
      },
    };
  } catch (error) {
    return {
      props: {
        beachCities: null,
        skiCities: null,
      },
    };
  }
}

export default Home;
